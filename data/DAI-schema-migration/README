___________________________________________________

     UPDATING THE DAI DATABASE SCHEMA (README)
___________________________________________________

------------------------------------
INITIAL SET UP (if not done already)
------------------------------------

a. Install SQLAlchemy version 0.9.2 or higher.
	% sudo pip install --upgrade SQLAlchemy

b. Install Alembic version 0.8.2 or higher.
	% sudo pip install --upgrade Alembic

c. Set the database connection info in PG_DB_URL environment variable. Alternative this can be set
   it in the alembic.ini file or pass to the  alembic  command using  -x db_url  option.
	% export PG_DB_URL=postgresql://[username[:password]]@host[:port]/database

d. Run the migration code to bring the database to the current schema version
	% cd <dai-repo-path>/data/DAI-schema-migration
	% python setup-daidb.py --alembic-ini=alembic.ini

------------------------
STEPS TO UPGRADE SCHEMA
------------------------

a. Apply the attached patch or pull the latest version.

b. Ensure the patch was applied or latest version was pulled, and the schema history is updated.
	% alembic history -v

c. If the patch was applied or latest version was pulled, you must see the latest file marked as (head).

d. Check the current state of the schema.
	% alembic current -v

e. If the current state of the schema is not at head the you must upgrade the schema by running.
	% alembic upgrade head

f. Your schema is now updated. If you face any compatibility issues while using this updated schema
   you can just downgrade your schema as follows.
	% alembic downgrade <revision_id_to_the_lower_version* or relative step to lower eg. -1 -2>

*you can get the revision_id by running the schema history command in step b of steps to upgrade schema


----------------------------
STEPS TO ADD A NEW REVISION
----------------------------

a. Auto generate a new revision
    % alembic revision -m "revision details"

b. Go to the newly created revision located in the schema-migration/versions.

c. Edit the upgrade and the downgrade functions, note that the upgrade functions always should include all the new
changes going into the DB in order and the downgrade must undo these changes in the inverse order, .ie. upgrade and
downgrade are additive inverses of each other.

d. Upgrade the schema by executing the alembic upgrade command
    % alembic upgrade head  OR   alembic upgrade +1
e. Before marking the new revision as done, ensure the downgrade function also executes as expected by downgrade to the
previous revision by executing the following
    % alembic downgrade -1  OR   alembic downgrade <revision_id of previous revision*>

*you can get the revision_id by running the schema history command in step b of steps to upgrade schema

-------------------------------
ENABLE/DISABLE DB PARTITIONING
-------------------------------

DB Partitioning can be enabled or disabled using the python script DBPartitioning-Purging.py in the folder schema-migration. Note that partitioning can not be
enable on a table which already contains data

1. Set the database connection info in PG_DB_URL environment variable. Alternative this can be passed as command line arguments using,
    -d or --db_url = postgresql+driver://username:password@host:port/database or
   	% export PG_DB_URL=postgresql://[username[:password]]@host[:port]/database

2. To enable partitioning execute the following :
    % python3 DBPartitioning-Purging.py enable <table_name> <partitioned_column>  --purge <retention_policy>
    NOTE:
    <table_name> : takes the name of a table which you wish to partition, this table should be mentioned as a partitioned table when you create the schema.
    <partitioned_column> : takes the column name of the column the table has been set up to be partitioned on in the create schema step initially.
    <retention_policy> : this takes input of the number of months of data you wish to retain, to not enable this purging set this value to 0.

3. To disable the partitioning execute the following :
    % python3 DBPartitioning-Purging.py disable <table_name>
    NOTE:
    <table_name> : takes the name of a table which you wish to partition, this table should be mentioned as a partitioned table when you create the schema.
