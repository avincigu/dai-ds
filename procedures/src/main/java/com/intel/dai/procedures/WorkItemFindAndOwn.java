// Copyright (C) 2017-2018 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

package com.intel.dai.procedures;

import java.lang.*;
import java.util.Arrays;
import org.voltdb.*;

/**
 * Handle the database processing that is necessary to find a work item that needs to be worked, and take ownership of that work item.
 *
 *  Input parameter:
 *     String  sWorkingAdapterType  = Type of adapter this is (used for determining which work to grab)
 *     long    lWorkingAdapterId    = Uniquely identifies this adapter (the adapter that is going to be working on this work item)
 *     String  sGrabBaseWork        = Flag indicating whether or not this is a special request to grab a base work item for an adapter.  Almost always this will be "F"!
 *                                      "T" = Only want to grab a base work item, and specifically the base work item that is specified in lBaseWorkId
 *                                      "F" = Want to grab a "normal" work item (this is almost always used)
 *     long    lBaseWorkId          = iff sGrabBaseWork is "T", this will contain the specific work item id for that base work.
 *                                    else the value in this field will be ignored.
 *     String  sQueueName           = name of the queue that the caller wants a work item from
 *                                     null = will take a work item from any queue
 *
 *  Returns:
 *      VoltTable containing pertinent information about this work item.
 *          - Id            // Unique work item id that was generated by the Requester (e.g., Requesters adapter type concatenated with an incrementing counter)
 *          - WorkToBeDone  // Requested work (what specific work was requested)
 *          - Parameters    // Parameters for this work item (may be in JSON format)
 *
 *  Sample invocation:
 *      echo "Exec WorkItemFindAndOwn ONLINE_TIER, 11, false, 0;" | sqlcmd
 *          Searches the Work Item queue for an item that is ready to be worked on but nobody has taken it yet.
 *              Look in the queue for an entry of this type of adapter that is not yet owned by anybody.
 *              Save "current" values for this entry into the WorkItem_History table (before changing the WorkItem record to reflect these changes)
 *              Update the work item entry
 *                  - Fill in WorkingAdapterId
 *                  - Update State to Working
 *                  - Update the DbUpdatedTimestamp w/ current timestamp
 *
 */

public class WorkItemFindAndOwn extends VoltProcedure {

    public final SQLStmt selectAvailWorkItem = new SQLStmt(
        "SELECT Queue, Id, WorkToBeDone, Parameters, NotifyWhenFinished, State, RequestingWorkItemId, RequestingAdapterType, WorkingAdapterId, WorkingResults, Results, StartTimestamp, DbUpdatedTimestamp " +
        "FROM WorkItem WHERE (WorkingAdapterType = ?) AND (WorkingAdapterId IS NULL) AND (State = 'Q' OR State = 'R') AND (WorkToBeDone != 'BaseWork') " +
        "Order By Id  LIMIT 1;"
    );
    public final SQLStmt selectAvailWorkItemFromQueue = new SQLStmt(
        "SELECT Queue, Id, WorkToBeDone, Parameters, NotifyWhenFinished, State, RequestingWorkItemId, RequestingAdapterType, WorkingAdapterId, WorkingResults, Results, StartTimestamp, DbUpdatedTimestamp " +
        "FROM WorkItem WHERE (WorkingAdapterType = ?) AND (WorkingAdapterId IS NULL) AND (State = 'Q' OR State = 'R') AND (WorkToBeDone != 'BaseWork') AND (Queue=?) " +
        "Order By Id  LIMIT 1;"
    );


    public final SQLStmt selectAvailBaseWorkItem = new SQLStmt(
        "SELECT Queue, Id, WorkToBeDone, Parameters, NotifyWhenFinished, State, RequestingWorkItemId, RequestingAdapterType, WorkingAdapterId, WorkingResults, Results, StartTimestamp, DbUpdatedTimestamp " +
        "FROM WorkItem WHERE WorkingAdapterType = ? AND WorkingAdapterId IS NULL AND State = 'Q' AND WorkToBeDone = 'BaseWork' AND Id = ? " +
        "Order By Id;"
    );


    public final SQLStmt insertWorkItemHistory = new SQLStmt(
        "INSERT INTO WorkItem_History " +
        "(Queue, WorkingAdapterType, Id, WorkToBeDone, Parameters, NotifyWhenFinished, State, RequestingWorkItemId, RequestingAdapterType, WorkingAdapterId, WorkingResults, Results, StartTimestamp, DbUpdatedTimestamp, RowInsertedIntoHistory) " +
        "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'T');"
    );


    public final SQLStmt updateWorkItemSql = new SQLStmt(
        "UPDATE WorkItem SET WorkingAdapterId = ?, State = ?, DbUpdatedTimestamp = CURRENT_TIMESTAMP WHERE WorkingAdapterType = ? AND Id = ?;"
    );



    public VoltTable run(String sWorkingAdapterType, long lWorkingAdapterId, String sGrabBaseWork, long lBaseWorkId, String sQueueName) throws VoltAbortException {
        String sWorkingAdapterTypeUC = sWorkingAdapterType.toUpperCase();
        String sQueueNameUC = null;
        if (sQueueName != null)
            sQueueNameUC = sQueueName.toUpperCase();

        //---------------------------------------------------------------------
        // Ensure that the specified flag for sNotifyWhenFinished is either a 'T' or 'F'
        //---------------------------------------------------------------------
        if ((!sGrabBaseWork.equals("T") && (!sGrabBaseWork.equals("F")))) {
            throw new VoltAbortException("WorkItemFindAndOwn - can't grab a work item (WorkingAdapterType=" + sWorkingAdapterTypeUC + ", WorkingAdapterId=" + lWorkingAdapterId + "), " +
                                         "because an invalid value was specified for the parameter sGrabBaseWork (" + sGrabBaseWork + ")!");
        }

        VoltTable[] aAvailWorkItemData;
        if (sGrabBaseWork.equals("T")) {
            //---------------------------------------------------------------------
            // Find the specified work item for the requesting adapters Base work item
            // - Additionally this gets the pre-change values out of the work item's row (so we can use it to create a history record)
            //---------------------------------------------------------------------
            voltQueueSQL(selectAvailBaseWorkItem, EXPECT_ONE_ROW, sWorkingAdapterTypeUC, lBaseWorkId);
            aAvailWorkItemData = voltExecuteSQL();
            aAvailWorkItemData[0].advanceRow();
        }
        else {
            //---------------------------------------------------------------------
            // Find an available work item (that this kind of adapter can handle, that is not yet assigned to another adapter)
            // - Additionally this gets the pre-change values out of the work item's row (so we can use it to create a history record)
            //---------------------------------------------------------------------
            if (sQueueNameUC == null) {
                voltQueueSQL(selectAvailWorkItem, sWorkingAdapterTypeUC);
            }
            else {
                voltQueueSQL(selectAvailWorkItemFromQueue, sWorkingAdapterTypeUC, sQueueNameUC);
            }
            aAvailWorkItemData = voltExecuteSQL();
            if (aAvailWorkItemData[0].getRowCount() == 0) {
                return aAvailWorkItemData[0];  // There aren't any work items for this adapter to work on!
            }
            aAvailWorkItemData[0].advanceRow();
        }

        //----------------------------------------------------------------------
        // Insert a "history" record for these updates into the history table (start with pre-change values then overlay with these changes).
        //----------------------------------------------------------------------
        voltQueueSQL(insertWorkItemHistory,
                     aAvailWorkItemData[0].getString("Queue"),
                     sWorkingAdapterTypeUC,
                     aAvailWorkItemData[0].getLong("Id"),
                     aAvailWorkItemData[0].getString("WorkToBeDone"),
                     aAvailWorkItemData[0].getString("Parameters"),
                     aAvailWorkItemData[0].getString("NotifyWhenFinished"),
                     "W",   // this work item is being worked on
                     aAvailWorkItemData[0].getLong("RequestingWorkItemId"),
                     aAvailWorkItemData[0].getString("RequestingAdapterType"),
                     lWorkingAdapterId,
                     aAvailWorkItemData[0].getString("WorkingResults"),
                     aAvailWorkItemData[0].getString("Results"),
                     aAvailWorkItemData[0].getTimestampAsTimestamp("StartTimestamp"),
                     this.getTransactionTime()  // Get CURRENT_TIMESTAMP or NOW
                    );

        //---------------------------------------------------------------------
        // Change the WorkItem's row to reflect the new state.
        //---------------------------------------------------------------------
        voltQueueSQL(updateWorkItemSql, lWorkingAdapterId, "W", sWorkingAdapterTypeUC, aAvailWorkItemData[0].getLong("Id"));
        voltExecuteSQL(true);

        //--------------------------------------------------
        // Get the information that we want to return to the caller into a VoltTable[].
        //--------------------------------------------------
        String sWorkingResults = aAvailWorkItemData[0].getString("WorkingResults");
        if (sWorkingResults == null) {
            sWorkingResults = "";
        }
        VoltTable vt = new VoltTable(new VoltTable.ColumnInfo("Id",             VoltType.BIGINT),
                                     new VoltTable.ColumnInfo("WorkToBeDone",   VoltType.STRING),
                                     new VoltTable.ColumnInfo("Parameters",     VoltType.STRING),
                                     new VoltTable.ColumnInfo("State",          VoltType.STRING),
                                     new VoltTable.ColumnInfo("WorkingResults", VoltType.STRING));
        vt.addRow(aAvailWorkItemData[0].getLong("Id"),
                  aAvailWorkItemData[0].getString("WorkToBeDone"),
                  aAvailWorkItemData[0].getString("Parameters"),
                  aAvailWorkItemData[0].getString("State"),
                  sWorkingResults);

        // Returns the Results field for this work item
        return vt;
    }

}